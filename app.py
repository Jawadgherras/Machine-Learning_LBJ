import requests
from bs4 import BeautifulSoup
import streamlit as st
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display 
import numpy as np
import plotly.graph_objects as go 
from ScrapingDonnees_st import *
from statistiques_descriptives_st import *
from ML_test import *
st.set_option("client.showErrorDetails", False)


st.set_page_config(
    page_title="Application Machine Learning et Web Scraping",
    page_icon="üèÄ",
    layout="wide",
    initial_sidebar_state="collapsed",
)



st.markdown("""
    <style>
    
    body {
        background-color: white; 
    }
    
    
    section[data-testid="stSidebar"] {
        background-color:rgb(51, 0, 102); 
    }
    
    
    [data-testid="stSidebar"] .css-1aumxhk {
        color: white;
    }
    </style>
""", unsafe_allow_html=True)


st.markdown("""
    <style>
    
    [data-testid="stSidebar"] .stRadio > div > label > div:first-child {
        width: 14px; 
        height: 14px;
        background-color:rgb(96, 96, 96); 
            border: 4.5px solid rgb(8, 122, 197); 
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
        }
    }

    
    [data-testid="stSidebar"] .stRadio input:checked + label > div:first-child div {
        background-color:rgb(96, 96, 96) !important;
    }

    
    [data-testid="stSidebar"] .stRadio > div > label {
        font-size: 1px;
        font-weight: bold;
    }
    </style>
    """,
    unsafe_allow_html=True
)



st.sidebar.title("üìöSommaireüìö")
option = st.sidebar.radio(
    "SECTIONS",
    [
        "üìã Pr√©sentation du projet de Machine Learning et Web Scraping",
        "üåê Scraping et pr√©sentation des donn√©es",
        "üìà Statistiques descriptives",
        "üíª Mod√®les de Machine Learning",
    ]
)


# Graphiques : 

@st.cache_data
def donnees(annees_debut, annees_fin):
    donnees=Donnees(annees_debut,annees_fin)
    dfgd=donnees.get_dataframe()
    return dfgd

df=donnees(2003, 2024)

# Affichage des sections selon l'option choisie
if option =="üìã Pr√©sentation du projet de Machine Learning et Web Scraping":
    st.markdown("# Projet de Machine Learning et Web Scraping")
    st.text(" ")
    st.write("Le r√¥le des donn√©es dans le sport a connu une r√©volution majeure au cours des deux derni√®res d√©cennies. Aux √âtats-Unis, notamment dans des ligues comme la NBA (basketball), la NFL (football am√©ricain), la MLB (baseball), et m√™me la NHL (hockey), les √©quipes ont adopt√© des approches data-driven pour optimiser leurs performances, affiner leurs strat√©gies et am√©liorer leur prise de d√©cision.")
    st.write("Dans le basket, en particulier la NBA, l'utilisation de la data est devenue essentielle √† tous les niveaux : analyse des performances des joueurs, pr√©diction des blessures, √©valuation des adversaires, gestion des contrats ect...")
    st.write("Les franchises NBA et d'autres √©quipes sportives professionnelles disposent aujourd'hui de cellules de data analytics appel√©es parfois Data Departments, Analytics Teams, ou Performance Labs. Ces d√©partements sont compos√©s de data analysts, data scientists, statisticiens, et parfois m√™me ing√©nieurs en IA, qui travaillent avec les coachs, managers, et scouts.")
    st.write("Ce projet vise √† explorer et √† analyser les statistiques de carri√®re NBA de LeBron James en s'appuyant sur des donn√©es collect√©es via le site ESPN et en les exploitant √† l'aide de mod√®les de Machine Learning")
    st.write("L'objectif principal est de r√©aliser un scraping des donn√©es relatives aux performances de LeBron James, de les explorer √† travers des analyses statistiques descriptives et d'appliquer des algorithmes de Machine Learning pour effectuer des pr√©dictions au scoring sur ses performances futures.")
    st.write("Ce projet a pour finalit√© de visualiser et comprendre les performances pass√©es de LeBron James √† travers des analyses statistiques et d'utiliser les donn√©es obtenues pour entra√Æner des mod√®les de pr√©diction, permettant d'estimer ses performances dans les matchs futurs.")
    
    st.write("Le projet est structur√© en trois grandes parties :")
    st.write("1. Scraping et pr√©sentation des donn√©es")
    st.write("2. Analyse statistique descriptive")
    st.write("3. Mod√®les de Machine Learning")
    st.text(" ")
    st.markdown("Afin de r√©aliser ce projet de Machine Learning et Web Scraping, nous avons utilis√© les librairies suivantes :")
    st.write("- pandas")
    st.write("- BeautifulSoup")
    st.write("- requests")
    st.write("- streamlit")
    st.write("- seaborn")
    st.write("- matplotlib")
    st.write("- IPython")
    st.write("- numpy")
    st.write("- scikit-learn")
    st.write("- plotly")
    st.write("- rich")
    st.write("Le code source de ce projet est disponible sur [GitHub]") ######
    
    st.markdown("Le projet a √©t√© r√©alis√© par Jawad Gherras et Gabriel Edinger, √©tudiants en Master 2 Mecen √† l'Universit√© de Tours.") 



elif option == "üåê Scraping et pr√©sentation des donn√©es":
    sommaire = st.sidebar.radio("Sommaire", ["Pr√©sentation des donn√©es", "Scraping des donn√©es", "Pr√©sentation du dataframe"])
    ## Pr√©sentation des donn√©es
    if sommaire == "Pr√©sentation des donn√©es":
        st.header("Statistiques de carri√®re de Lebron James")
        st.text(" ")
        
        st.write(" Les donn√©es collect√©es sur le site ESPN concernent les statistiques de LeBron James en NBA.")
        st.write("Voici un aper√ßu des donn√©es collect√©es provenant du site ESPN, sur les images suivantes : ")
        
        st.image("IMGS/ESPN1.png")
        st.image("IMGS/ESPN2.png")
        st.text(" ")
        st.write("[Pour plus d'informations sur les statistiques de LeBron James, cliquez ici](https://www.espn.com/nba/player/gamelog/_/id/1966/type/nba/year/2025)")
    
    ## Scraping des donn√©es
    elif sommaire == "Scraping des donn√©es":
        st.write("""Le scraping des donn√©es de LeBron James se fait √† partir du site ESPN en analysant la structure HTML des pages de statistiques de ses matchs. 
                 Le site pr√©sente les donn√©es sous forme de tableaux mensuels regroup√©s dans des blocs HTML identifiables par une classe sp√©cifique ("mb5"). 
                 Chaque bloc correspond √† un mois de la saison et contient un tableau listant les performances de chaque match jou√© par LeBron.""")
        
        st.write("""Le processus de scraping commence par l'envoi d'une requ√™te √† la page web via la librairie requests pour obtenir le contenu HTML de la page. Ensuite, 
                 le contenu est analys√© avec BeautifulSoup pour localiser les blocs contenant les tableaux de statistiques. 
                 Le code parcourt chaque bloc de mani√®re it√©rative pour extraire les informations des tableaux HTML, comme la date du match, 
                 l'√©quipe adverse, le score, les points marqu√©s, le nombre de minutes jou√©es, etc.""")
        
        st.write("""D'autre part, afin d'obtenir les donn√©es correspondantes uniquement √† celles dans le tableau du site ESPN et non les autres informations, 
        nous avons supprimer les entetes comme la saisons, les statistiques totales par mois ou les statitiques totales pour la saison.""")
        
        st.write("""De plus, nous avons modifi√© la colonne OPP constitu√© du nom de l'√©quipe adverse et d'"@" qui est utilis√© pour signifier que le match jou√©, est √† l'ext√©rieur et "vs" pour un match √† domicile.  
                Nous avons gard√© cette colonne OPP mais nous avons simplement laisser le nom de l'√©quipe adverse. 
                Une colonne location est cr√©√©e constitu√© soit de "Ext√©rieur" si auparavant on avait "@" et "Domicile" si on avait "vs".""")
        
        st.write(""" Pour finir, nous cr√©ons un dataframe avec toutes les donn√©es pour chaque saisons √† l'aide de Pandas. Egalement nous avons modifi√© les types de donn√©es pour les colonnes afin de pourvoir les utiliser dans nos analyses et mod√®les.
                Les donn√©es collect√©es ont √©t√© sauvegard√©es dans un fichier CSV.""")
        st.write("Pour plus de d√©tails sur le code source, veuillez consulter le fichier 'app.py' sur [GitHub]")######
    
    
    
    ## Pr√©sentation du dataframe 
    elif sommaire == "Pr√©sentation du dataframe":
        st.write(f"La base de donn√©es poss√®de {df.shape[0]} lignes et {df.shape[1]} colonnes issues du site ESPN.")
        
        from io import StringIO
        memoire = StringIO()
        df.info(buf=memoire)
        info_str = memoire.getvalue()
        st.write("Informations sur le DataFrame et les types de donn√©es :")
        st.text(info_str)
        
        st.write("Statistiques descriptives du DataFrame :")
        st.write(df.describe())
        st.text(" ")
        st.write("Les colonnes du DataFrame sont les suivantes :")
        st.write(df.columns)
        st.write("Voici un aper√ßu des donn√©es collect√©es :")
        st.dataframe(df)

elif option == "üìà Statistiques descriptives":
    
    st.header("Statistiques descriptives")
    st.markdown("#### Pr√©sentation de plusieurs statistiques descriptives")
    
    graphique = st.sidebar.selectbox("Choisissez un graphique", ["Points marqu√©s et matchs jou√©s",
                                                             "R√©ussite au tir", 
                                                             "Victoires et d√©faites selon la localisation", 
                                                             "Adversaires de LeBron James",
                                                             "Distribution des points marqu√©s",
                                                             ])
    
    if graphique == "Points marqu√©s et matchs jou√©s":
        st.subheader("Somme des points marqu√©s par LeBron James et par ann√©e")
        st.write(" ")
        plot_points_somme_plotly(df)
        st.subheader("Moyenne de points par match et par ann√©e")
        st.write(" ")
        plot_points_moyens_no_text(df)
        st.subheader("Nombre de matchs jou√©s par par ann√©e")
        st.write(" ")
        matchs_par_annee(df)
        st.subheader("Victoires et d√©faites de LeBron James par ann√©e")
        st.write(" ")
        victoires_par_annee(df)


    elif graphique == "R√©ussite au tir":
        st.subheader("Barplot du pourcentage de r√©ussite au tir (FG%) par ann√©e")
        st.write(" ")
        pourcentage_reussite_par_annee(df)
        st.subheader("Barplot du pourcentage de r√©ussite √† 3 points (3P%) par ann√©e")
        st.write(" ")
        pourcentage_tirs_3_points_par_annee(df)

    elif graphique == "Victoires et d√©faites selon la localisation":
        st.subheader("Tableau des r√©sultats selon la localisation")
        tab_localisation(df)
        st.write(" ")
        st.subheader("Diagramme √† barres des r√©sultats selon la localisation")
        plot_localisation_plotly(df)

    elif graphique == "Adversaires de LeBron James":
        st.subheader("Adversaires pr√©f√©r√©s de LeBron James")
        points_par_equipe_adverse(df)
        st.subheader("Moyenne de points par match contre les √©quipes adverses")
        st.write(" ")
        st.subheader("Les √©quipes contre lesquelles LeBron James a marqu√© le plus de points en moyenne par match.")
        points_moyens_par_equipe(df)
        st.write(" ")
        st.write("LeBron James a affront√© 30 √©quipes diff√©rentes en NBA. Voici les √©quipes qu'il a le plus affront√©es.")
        equipe_plus_affronte(df)
        st.write(" ")
        st.subheader("Somme des points encaiss√©s par Lebron James selon les √©quipes")
        somme_des_points_encaiss√©s_par_equipes(df)
        st.write(" ")
        st.subheader("Moyenne des points encaiss√©s par les Lebron James selon les √©quipes")
        moyennes_des_points_encaiss√©s_par_equipes(df)    
    
    elif graphique == "Distribution des points marqu√©s":
        st.subheader("Distribution des points marqu√©s par LeBron James")
        st.write(" ")
        distribution_points(df)    

elif option == "üíª Mod√®les de Machine Learning":
    
    choix_sous_sous_section = st.sidebar.radio("Sous-sous-sections", ["Etude des variables", "Etude des mod√®les"])
    
    st.header("Etude des variables et mod√®les de Machine Learning")
    st.text(" ")
    
    if choix_sous_sous_section == "Etude des variables":
        Varibles_selection=st.selectbox("Etude des variables", ["Matrices de correlation", "Nuages de points",
                                            "Boxplot et graphique des points"])
        if Varibles_selection == "Matrices de correlation" :
            st.write("Matrice de correlation lin√©aire entre les variables FG%, MIN et PTS")
            st.write(" ")
            correlation_entre_variables_MIN_FG_PTS(df)
            st.write(" ")
            st.write("Matrice de correlation non lin√©aire entre les variables FG%, MIN et PTS")
            st.write(" ")
            correlation_non_lineaire(df)
            st.write(" ")
            st.write("Matrice de correlation lin√©aire entre toutes les variables")
            st.write(" ")
            correlation_lineaire_entre_variables(df)
            st.write(" ")
            st.write("Matrice de correlation non lin√©aire entre toutes les variables")
            st.write(" ")
            correlation_non_lineaire_entre_variables(df)
        elif Varibles_selection == "Nuages de points":  
            st.write("Nuage de points entre les variables PTS et MIN")
            st.write(" ") 
            nuage_de_points_MIN_PTS(df)
            st.write(" ")
            st.write("Nuage de points entre les variables PTS et FG%")
            st.write(" ")
            nuage_de_points_FG_PTS(df)
            st.write(" ")
            st.write("Nuage de points entre les variables PTS et la localisation")
            st.write(" ")
            nuage_de_points_Location_PTS(df)
            st.write(" ")
            st.write("Nuage de points entre les variables PTS et le resultat")
            st.write(" ")
            nuage_de_points_Result_PTS(df)
        elif Varibles_selection == "Boxplot et graphique des points":
            st.write("Boxplot des points marqu√©s par LeBron James selon le r√©sultat du match")
            st.write(" ")
            boxplot_Result_PTS(df)
            st.write(" ")
            st.write("Graphique de l'√©volution des points marqu√©s par LeBron James selon l'ann√©e et la localisation")
            st.write(" ")
            evolution_points_annees(df)
    
    if choix_sous_sous_section == "Etude des mod√®les":
        choix_modele=st.selectbox("Mod√®les de Machine Learning", ["Pr√©paration donn√©es", "KNN", "R√©gression lin√©aire", "Regression polynomiale", "SVR", "Gradient-Boosting", "Random Forest", "MLP", "Comparaison des mod√®les"])
        
        if choix_modele == "Pr√©paration donn√©es":
                st.write("Pr√©paration des donn√©es avec la fonction 'prep_donnees' issue de train_test_split de sklearn")
                st.markdown("#### Les donn√©es sont divis√©es en donn√©es d'entra√Ænement et donn√©es de test avec un ratio de 80/20 par d√©faut.")
                st.write(" ")
                st.write("Une fonction 'prep_donnees' a √©t√© cr√©√©e pour pr√©parer les donn√©es pour les mod√®les de Machine Learning. Pour cela, nous avons utilis√© la fonction 'train_test_split' de la librairie scikit-learn. Pour l'appeler, il suffit de lui passer : test_size=0.2 (taille de l'√©chantillon de test), random_state=42 (graine)")
                st.write("La variable cible (y) est 'PTS' (points marqu√©s par LeBron James). Les variables explicatives (X) sont les autres variables.")
                st.write(" ")
                st.write("Les donn√©es d'entra√Ænement et de test sont stock√©es dans les variables X_train, X_test, y_train et y_test. L'initialisation se fait avec la fonction 'prep_donnees(test_size=0.2, random_state=42)'.")
        elif choix_modele=="KNN":
            st.write("Mod√®le KNN")
            st.write(" ")
            st.write("Le mod√®le KNN (K-Nearest Neighbors) (sans acp) ici est un mod√®le de r√©gression qui attribue une pr√©dit un point en fonction de la moyenne des valeurs des k points les plus proches.")
            st.write(" ")
            st.write("Le mod√®le KNN a √©t√© entra√Æn√© avec les donn√©es d'entra√Ænement et test√© avec les donn√©es de test. La m√©trique utilis√©e est le NMSE (Negative Mean Squared Error).")
            st.write(" ")
            st.write("Pour l'appeler, il vous faut utiliser la fonction knn_avec_ou_sans_ACP(). Elle poss√®de les param√®tres suivants : n_neighbors (nombre de voisins), acp (bool√©en pour activer ou non l'ACP), n_components (nombre de composantes pour l'ACP), test_size (taille de l'√©chantillon de test), random_state (graine) choisis ou par d√©faut. Les param√®tres finaux sont ceux qui optimisent le score d'entrainement avec l'aide de la m√©thode GridSearchCV().")
            st.write(" ")
            st.write("Voici un exemple d'appel et de r√©sultats: knn_avec_ou_sans_ACP(ACP=False, n_neighbors=[3, 5, 7, 9], weights=['uniform', 'distance'], p=[1, 2], ACP_composantes=[2, 3, 4, 5], test_size=0.2, random_state=42): ")
            st.write(" ")
            st.image("IMGS/Knn.png")
            st.write(" ")
            st.image("IMGS/Knn_acp.png")
            
        elif choix_modele=="R√©gression lin√©aire":
            st.write("Mod√®le de r√©gression lin√©aire")
            st.write(" ")
            st.write("Le mod√®le de r√©gression lin√©aire est ici un mod√®le de r√©gression qui cherche √† √©tablir une relation lin√©aire entre la variable cible et les variables explicatives.")
            st.write(" ")
            st.write("Ici ce mod√®le est divis√© en trois sous mod√®les, lin√©aire, lasso et ridge. La m√©trique utilis√©e est le NMSE (Negative Mean Squared Error).")
            st.write(" ")
            st.write("Pour l'appeler, il vous faut utiliser la fonction regressions_lineaires(). Elle poss√®de les param√®tres suivants : type_de_modele ('lineaire', 'lasso', 'ridge'), alpha (param√®tre de r√©gularisation), test_size (taille de l'√©chantillon de test), random_state (graine)  choisis ou par d√©faut. Les param√®tres finaux sont ceux qui optimisent le score d'entrainement avec l'aide de la m√©thode GridSearchCV().")
            st.write(" ")
            st.write("Voici un exemple d'appel et de r√©sultats: regressions_lineaires(type_de_modele='lineaire', alpha=[0.001, 0.01, 0.1, 1, 10], test_size=0.2, random_state=42): ")
            st.write(" ")
            st.write("R√©gression lin√©aire")
            st.image("IMGS/lr.png")
            st.write(" ")
            st.write("R√©gression lasso")
            st.image("IMGS/lasso.png")
            st.write(" ")
            st.write("R√©gression ridge")
            st.image("IMGS/ridge.png")
        
        elif choix_modele=="Regression polynomiale":
            st.write("Mod√®le de r√©gression polynomiale")
            st.write(" ")
            st.write("Le mod√®le de r√©gression polynomiale est ici un mod√®le de r√©gression qui cherche √† √©tablir une relation polynomiale entre la variable cible et les variables explicatives.")
            st.write(" ")
            st.write("La m√©trique utilis√©e est le NMSE (Negative Mean Squared Error).")
            st.write(" ")
            st.write("Pour l'appeler, il vous faut utiliser la fonction regression_polynomiale(). Elle poss√®de les param√®tres suivants : type_de_modele (lineaire, lasso, ridge), alpha (param√®tre de r√©gularisation), le degres (degr√© du polynome), test_size (taille de l'√©chantillon de test), random_state (graine), test_size (la taille de l'√©chantillon de test) choisis ou par d√©faut. Les param√®tres finaux sont ceux qui optimisent le score d'entrainement avec l'aide de la m√©thode GridSearchCV().")
            st.write(" ")
            st.write("Voici un exemple d'appel et de r√©sultats: regression_polynomiales(df, type_de_modele='lineaire', alpha=[0.001, 0.01, 0.1, 1, 10], degres=[1, 2, 3], test_size=0.2, random_state=42): ")
            st.write(" ")
            st.image("IMGS/poly_lr.png")
            st.write(" ")
            st.image("IMGS/poly_lasso.png")
            st.write(" ")
            st.image("IMGS/poly_ridge.png")
        
        elif choix_modele=="SVR":
            st.write("Mod√®le de SVR")
            st.write(" ")
            st.write("Le mod√®le de SVR (Support Vector Regression) est ici un mod√®le de r√©gression qui cherche √† √©tablir une relation entre la variable cible et les variables explicatives.")
            st.write(" ")
            st.write("La m√©trique utilis√©e est le NMSE (Negative Mean Squared Error).")
            st.write(" ")
            st.write("Pour l'appeler, il vous faut utiliser la fonction svr(). Elle poss√®de les param√®tres suivants : kernel ('linear', 'poly', 'rbf', 'sigmoid'), C (param√®tre de r√©gularisation), epsilon (param√®tre de libert√©), test_size (taille de l'√©chantillon de test), random_state (graine) choisis ou par d√©faut. Les param√®tres finaux sont ceux qui optimisent le score d'entrainement avec l'aide de la m√©thode GridSearchCV().")
            st.write(" ")
            st.write("Voici un exemple d'appel et de r√©sultats: support_vector_regression(df, C=[0.1, 1, 10, 100], epsilon=[0.1, 0.01, 0.001], kernel=['linear', 'poly', 'rbf'], test_size=0.2, random_state=42): ")
            st.write(" ")
            st.write("Mod√®le de SVR")
            st.image("IMGS/SVR.png")
        
        elif choix_modele=="Gradient-Boosting":
            st.write("Mod√®le de Gradient-Boosting")
            st.write(" ")
            st.write("Le mod√®le de Gradient-Boosting est ici un mod√®le de r√©gression qui cherche √† √©tablir une relation entre la variable cible et les variables explicatives.")
            st.write(" ")
            st.write("La m√©trique utilis√©e est le NMSE (Negative Mean Squared Error).")
            st.write(" ")
            st.write("Pour l'appeler, il vous faut utiliser la fonction gradient_boosting(). Elle poss√®de les param√®tres suivants : nbr_estimateurs (nombre d'estimateurs), profondeur_max (max_depth), taux_apprentissage (learning rate), test_size (taille de l'√©chantillon de test), random_state (graine) choisis ou par d√©faut. Les param√®tres finaux sont ceux qui optimisent le score d'entrainement avec l'aide de la m√©thode GridSearchCV().")
            st.write(" ")
            st.write("Voici un exemple d'appel et de r√©sultats: gradient_boosting(df, nbr_estimateurs=[200, 300, 1000], taux_apprentissage=[0.1, 0.01, 0.001], profondeur_max=[3, 5, 7, 9], test_size=0.2, random_state=42): ")
            st.write(" ")
            st.image("IMGS/gradient_boosting.png")
        
        elif choix_modele=="Random Forest":
            st.write("Mod√®le de Random Forest")
            st.write(" ")
            st.write("Le mod√®le de Random Forest est ici un mod√®le de r√©gression qui cherche √† √©tablir une relation entre la variable cible et les variables explicatives.")
            st.write(" ")
            st.write("La m√©trique utilis√©e est le NMSE (Negative Mean Squared Error).")
            st.write(" ")
            st.write("Pour l'appeler, il vous faut utiliser la fonction random_forest(). Elle poss√®de les param√®tres suivants : nb_estimators (nombre d'estimateurs), max_depth (profondeur_max), min_samples_split (nombre minimum d'individu pour une split), test_size (taille de l'√©chantillon de test), random_state (graine) choisis ou par d√©faut. Les param√®tres finaux sont ceux qui optimisent le score d'entrainement avec l'aide de la m√©thode GridSearchCV().")
            st.write(" ")
            st.write("Voici un exemple d'appel et de r√©sultats: random_forest(df,n_estimators=[200, 300, 400], max_depth=[3, 5, 7, 9], min_samples_split=[2, 3, 4], test_size=0.2, random_state=42): ")
            st.write(" ")
            st.image("IMGS/random_forest.png")
        
        elif choix_modele=="MLP":
            st.write("Mod√®le de MLP")
            st.write(" ")
            st.write("Le mod√®le de MLP (Multi-Layer Perceptron) est ici un mod√®le de r√©gression qui cherche √† √©tablir une relation entre la variable cible et les variables explicatives.")
            st.write(" ")
            st.write("La m√©trique utilis√©e est le NMSE (Negative Mean Squared Error).")
            st.write(" ")
            st.write("Pour l'appeler, il vous faut utiliser la fonction reseaux_neurones(). Elle poss√®de les param√®tres suivants : couchidden_layer_sizeshe_cachee (nombre de neurones par couche et nombre de couches cach√©es), solver (solver pour l'optimisation des poids), fct_activation (fonction d'activation), test_size (taille de l'√©chantillon de test), random_state (graine) choisis ou par d√©faut. Les param√®tres finaux sont ceux qui optimisent le score d'entrainement avec l'aide de la m√©thode GridSearchCV().")
            st.write(" ")
            st.write("Voici un exemple d'appel et de r√©sultats: reseaux_neurones(df, hidden_layer_sizes=[(50,), (100,), (50,50)], fct_activation=['relu','tanh', 'logistic'], solver=['lbfgs', 'adam'], test_size=0.2, random_state=42': ")
            st.write(" ")
            st.image("IMGS/reseau_neurones.png")
        
        elif choix_modele=="Comparaison des mod√®les":
            st.write("Comparaison des mod√®les")
            st.write(" ")
            st.write("Pour comparer les mod√®les, nous avons utilis√© la fonction 'comparaison_modeles'.")
            st.write(" ")
            st.write("Cette fonction prend en param√®tre les mod√®les √† comparer et les donn√©es d'entra√Ænement et de test. Elle renvoie un DataFrame avec les scores de chaque mod√®le.")
            st.write(" ")
            st.write("Voici un exemple d'appel et de r√©sultats: ccomparaison_resultats(df, modele_teste=None, test_size=0.2, random_state=42, parametres_knn=None, parametres_knn_acp=None, parametres_lineaire=None, parametres_poly_lr=None, parametres_poly_lasso=None, parametres_poly_ridge=None, parametres_svr=None, parametres_gbr=None, parametres_rfr=None, parametres_mlp=None): ")
            st.write(" ")
            st.image("IMGS/comparaison_resultats.png")
